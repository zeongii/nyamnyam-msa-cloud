server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  config:
    activate:
      on-profile: default

  application:
    name: api

  main:
    allow-bean-definition-overriding: true
    web-application-type: reactive

  cloud:
    gateway:
      routes:
        - id: admin
          uri: lb://admin
          predicates:
            - Path=/admin/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/admin/(?<segment>.*), /$\{segment}

        - id: chat
          uri: lb://chat
          predicates:
            - Path=/chat/chats
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/chat/(?<segment>.*), /$\{segment}

        - id: post
          uri: lb://post/actuator/**
          predicates:
            - Path=/post/posts
            - Method=GET, POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/post/(?<segment>.*), /$\{segment}

        - id: restaurant
          uri: lb://restaurant
          predicates:
            - Path=/restaurant/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/restaurant/(?<segment>.*), /$\{segment}

        - id: user
          uri: lb://user
          predicates:
            - Path=/user/**
            - Method=GET, POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user/(?<segment>.*), /$\{segment}


        - id: login-route
          uri: http://localhost:8000
          predicates:
            - Path=/auth/login
          filters:
            - RemoveRequestHeader=Cookie

        - id: oauth2-route
          uri: http://localhost:8000
          predicates:
            - Path=/auth/oauth2/**
          filters:
            - RewritePath=/auth/oauth2/(?<segment>.*), /${segment}
  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: e2iaB9q3A_kk1k7hX6Qi
            client-secret: Av6eAE_PsV
            redirect-uri: "{baseUrl}/auth/oauth2/code/naver"
            scope: email, profile
            authorization-grant-type: authorization_code
            provider: naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me

  cors:
    allowed-origins: "http://localhost:3000"
    allowed-methods: GET, POST, PUT, DELETE, OPTIONS
    allowed-headers: "*"
    allow-credentials: true

jwt:
  secret: "bywm4zC5-vR36j_mZPsd4jmNFUuny0XuYoln59AStsI="
  expired:
    access: 3600000  # 액세스 토큰 만료 시간 (예: 1시간)
    refresh: 7200000 # 리프레시 토큰 만료 시간 (예: 2시간)


logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    org.springframework.cloud.gateway: DEBUG
